/* Запрос "живых" лидов*/
select * from presales where life = '1' order by data_registration asc 
/* Заппрос по планируемой стоимости контракта от большего к меньшему*/
select * from presales order by budget desc
/*как частный вариант предыдущего запроса с отсечкой по ожидаемой стоимости проекта*/
select * from presales where budget > 10000000 order by budget desc
/*Запрос по аккаунту и его "живым" лидам с сортировкой по ожидаемой стоимости (можно и без)*/
select * from presales where (ka_manager = 'Баринов Никита' and life = '1') order by budget desc 
/*Запрос лидов по вилке дат*/
select * from presales where data_registration between '2022.01.01' and '2022.12.31' order by data_registration asc
/*Подсчет количества живых лидов в период времени по конкретному аккаунту*/
select count(*) from presales as life_leads where ((data_registration between '2022.01.01' and '2023.12.31') and (ka_manager = 'Баринов Никита') and (life = '1'))
/*как частный вариант предыдущего примера - запрос количества живых лидов, сделанных аккаунтом с определенной даты*/
select count(*) from presales as life_leads where ((data_registration > '2023.12.31') and (ka_manager = 'Баринов Никита') and (life = '1'))
/*...и потерянных аккаунтом лидов за период времени*/
select count(*) from presales as life_leads where ((data_registration between '2022.01.01' and '2023.12.31') and (ka_manager = 'Баринов Никита') and (life = '2'))

/*Используемые поля: life, data_registration, ka_manager, budget*/

/*
Первичный ключ, на мой взгляд, надо сделать по полю id_presale, т.к. поле автоинкриментное и не пустое.
Я уже это сделал, когда таблицу создавал командой PRIMARY KEY, но упражнение лишним не будет.
*/
ALTER TABLE presales
ADD PRIMARY KEY (id_presale)

/*Создадим индексы по полям на основе анализа характерных запросов*/

/*Сначала простые индексы*/
create index life_index on presales (life)
create index budget_index on presales (budget)
create index data_registration_index on presales (data_registration_index)

/*И составные, котрые нам помогут ускорить процесс получения результаты по сложным запросам*/
create index ka_manager_life_budget_index on presales (ka_manager, life, budget) /*Поможет нам связать аккаунта с его лидами и бюджетом этих лидов*/

create index ka_manager_budget_data_registration_index on presales (ka_manager, budget, data_registration) /*Поможет нам связать аккаунта со стоимостью его лидов во времени*/

Применение команды explain

Результаты выполнения команды до и после создания индексов:
До создания индекса:
id|select_type|table   |type|possible_keys|key|key_len|ref|rows|Extra|
--+-----------+--------+----+-------------+---+-------+---+----+-----+
 1|SIMPLE     |presales|ALL |             |   |       |   |7   |     |

После создания индекса:
id|select_type|table   |type |possible_keys|key                         |key_len|ref|rows|Extra      |
--+-----------+--------+-----+-------------+----------------------------+-------+---+----+-----------+
 1|SIMPLE     |presales|index|             |ka_manager_life_budget_index|128    |   |7   |Using index|
 
Первая таблица практически пуста. Это нам говорит, что в первом случае, до создания индекса, сканирвоание таблицы было полное, по всем строкам и полям. Это показывает нам пустое поле TYPE.
В поле KEY так же нет никакого значения. Это значит, что никакого инденкса не применялось при выводе результата запроса. Собственно, на этом и все.

Вторая таблица была получена после того, как был создан индекс ka_manager_life_budget_index и был вновь выполнен запрос.
В таблице появились значения в полях TYPE, KEY, KEY_LEN и EXTRA. Значение поля TYPE дает нам понимание, что таблица была "пройдена" полностью, но в порядке, который был задан индексом, 
при этом СУБД выполнила оптимизацию поиска с помощью примененного покрывающего индекса - на это указывает нам запись в поле EXTRA (Using index) - поиск шел только по указанным в индексе полям.
В поле KEY имя примененного индекса, а в поле KEY_LEN его побитовая длина.

Из проведенного опыта, мы можем сделать вывод, что применение индекса/индексов значительно оптимизирует вывод результата проведенного запроса.
Вместе с тем, стоит отметить, что этот результат виден только при большом (значительно большом) количестве записей в таблице. При малом количестве записей, оптимизация практически не замечается и, 
чем меньше записей, тем Delta времени, между выводом данных по запросу без индекса и выводом данных по запросу с применением построенного индекса, будет стремиться к нулю.
 

